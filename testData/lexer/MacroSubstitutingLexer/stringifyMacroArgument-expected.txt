- ('-')
atom_name ('module')
( ('(')
atom_name ('stringifyMacroArgument')
) (')')
. ('.')
WHITE_SPACE ('\n\n')
- ('-')
atom_name ('define')
( ('(')
var ('LOG_EXPR')
( ('(')
var ('EXPR')
) (')')
, (',')
macro_body_begin ('')
WHITE_SPACE ('\n  ')
case ('case')
WHITE_SPACE (' ')
var ('EXPR')
WHITE_SPACE (' ')
of ('of')
WHITE_SPACE ('\n    ')
var ('Result')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE ('\n      ')
atom_name ('io')
: (':')
atom_name ('format')
( ('(')
string ('"~s: ~p~n"')
, (',')
WHITE_SPACE (' ')
[ ('[')
? ('?')
? ('?')
var ('EXPR')
, (',')
WHITE_SPACE (' ')
var ('Result')
] (']')
) (')')
, (',')
WHITE_SPACE ('\n      ')
var ('Result')
WHITE_SPACE ('\n  ')
end ('end')
macro_body_end ('')
) (')')
. ('.')
WHITE_SPACE ('\n\n')
atom_name ('log_2_plus_2')
( ('(')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE ('\n  ')
? ('?')
var ('LOG_EXPR')
( ('(')
integer ('2')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
integer ('2')
) (')')
Wrapper (case) ('case')
Wrapper (integer) ('2')
Wrapper (+) ('+')
Wrapper (integer) ('2')
Wrapper (of) ('of')
Wrapper (var) ('Result')
Wrapper (->) ('->')
Wrapper (atom_name) ('io')
Wrapper (:) (':')
Wrapper (atom_name) ('format')
Wrapper (() ('(')
Wrapper (string) ('"~s: ~p~n"')
Wrapper (,) (',')
Wrapper ([) ('[')
Wrapper (string) ('"2 + 2"')
Wrapper (,) (',')
Wrapper (var) ('Result')
Wrapper (]) (']')
Wrapper ()) (')')
Wrapper (,) (',')
Wrapper (var) ('Result')
Wrapper (end) ('end')
. ('.')