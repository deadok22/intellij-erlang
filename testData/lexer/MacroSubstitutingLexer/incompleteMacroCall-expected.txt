- ('-')
atom_name ('module')
( ('(')
atom_name ('incompleteMacroCall')
) (')')
. ('.')
WHITE_SPACE ('\n\n')
- ('-')
atom_name ('define')
( ('(')
var ('MACRO')
, (',')
macro_body_begin ('')
WHITE_SPACE (' ')
atom_name ('ok')
macro_body_end ('')
) (')')
. ('.')
WHITE_SPACE ('\n')
- ('-')
atom_name ('define')
( ('(')
var ('RPAR')
, (',')
macro_body_begin ('')
WHITE_SPACE (' ')
) (')')
macro_body_end ('')
) (')')
. ('.')
WHITE_SPACE ('\n\n')
module_doc_comment ('%%%')
WHITE_SPACE ('\n')
module_doc_comment ('%%% This code is not accepted by erlc - it tries to complete arguments list for ?MACRO call.')
WHITE_SPACE ('\n')
module_doc_comment ('%%% Although it could be processed if ?MACRO was substituted as parameterless macro.')
WHITE_SPACE ('\n')
module_doc_comment ('%%% Yet it's not, so we don't need to do the substitution here.')
WHITE_SPACE ('\n')
module_doc_comment ('%%%')
WHITE_SPACE ('\n')
atom_name ('foo')
( ('(')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
? ('?')
var ('MACRO')
( ('(')
WHITE_SPACE (' ')
? ('?')
var ('RPAR')
. ('.')